
import json
import os
import random
import string
import time
from datetime import datetime, timedelta

SMS_CODES_FILE = 'sms_codes.json'
USER_SESSIONS_FILE = 'user_sessions.json'

def load_sms_codes():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–¥—ã SMS –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(SMS_CODES_FILE):
        try:
            with open(SMS_CODES_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_sms_codes(codes):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥—ã SMS –≤ —Ñ–∞–π–ª"""
    with open(SMS_CODES_FILE, 'w', encoding='utf-8') as f:
        json.dump(codes, f, ensure_ascii=False, indent=2)

def load_user_sessions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏"""
    if os.path.exists(USER_SESSIONS_FILE):
        try:
            with open(USER_SESSIONS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_user_sessions(sessions):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏"""
    with open(USER_SESSIONS_FILE, 'w', encoding='utf-8') as f:
        json.dump(sessions, f, ensure_ascii=False, indent=2)

def generate_sms_code():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 4-–∑–Ω–∞—á–Ω—ã–π SMS –∫–æ–¥"""
    return ''.join(random.choices(string.digits, k=4))

def send_sms_code(phone):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS –∫–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    –í —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥ –≤ –ø–∞–º—è—Ç–∏
    """
    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    clean_phone = ''.join(filter(str.isdigit, phone))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–µ –±–æ–ª–µ–µ 3 SMS –≤ —á–∞—Å)
    codes = load_sms_codes()
    current_time = datetime.now()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö SMS –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    hour_ago = current_time - timedelta(hours=1)
    recent_codes = [
        code_data for code_data in codes.values() 
        if (code_data.get('phone') == clean_phone and 
            datetime.fromisoformat(code_data.get('created_at', '2020-01-01')) > hour_ago)
    ]
    
    if len(recent_codes) >= 3:
        return {
            'success': False,
            'message': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —á–∞—Å.'
        }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    sms_code = generate_sms_code()
    code_id = f"{clean_phone}_{int(time.time())}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ (–¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç)
    codes[code_id] = {
        'phone': clean_phone,
        'code': sms_code,
        'created_at': current_time.isoformat(),
        'expires_at': (current_time + timedelta(minutes=10)).isoformat(),
        'used': False
    }
    
    save_sms_codes(codes)
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ SMS API
    print(f"üì± SMS –∫–æ–¥ –¥–ª—è {clean_phone}: {sms_code}")
    print(f"‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç")
    
    return {
        'success': True,
        'message': f'SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {clean_phone}',
        'test_code': sms_code,  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!
        'phone': clean_phone
    }

def verify_sms_code(phone, entered_code):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π SMS –∫–æ–¥"""
    clean_phone = ''.join(filter(str.isdigit, phone))
    codes = load_sms_codes()
    current_time = datetime.now()
    
    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    for code_id, code_data in codes.items():
        if (code_data.get('phone') == clean_phone and 
            code_data.get('code') == entered_code and 
            not code_data.get('used', False)):
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥
            expires_at = datetime.fromisoformat(code_data.get('expires_at'))
            if current_time > expires_at:
                return {
                    'success': False,
                    'message': '–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'
                }
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            codes[code_id]['used'] = True
            codes[code_id]['verified_at'] = current_time.isoformat()
            save_sms_codes(codes)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é
            session_token = create_user_session(clean_phone)
            
            return {
                'success': True,
                'message': '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!',
                'session_token': session_token,
                'phone': clean_phone
            }
    
    return {
        'success': False,
        'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.'
    }

def create_user_session(phone):
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    sessions = load_user_sessions()
    session_token = ''.join(random.choices(string.ascii_letters + string.digits, k=32))
    
    sessions[session_token] = {
        'phone': phone,
        'created_at': datetime.now().isoformat(),
        'last_activity': datetime.now().isoformat()
    }
    
    save_user_sessions(sessions)
    return session_token

def get_user_by_session(session_token):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É —Å–µ—Å—Å–∏–∏"""
    if not session_token:
        return None
        
    sessions = load_user_sessions()
    session_data = sessions.get(session_token)
    
    if not session_data:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è (30 –¥–Ω–µ–π)
    last_activity = datetime.fromisoformat(session_data.get('last_activity'))
    if datetime.now() - last_activity > timedelta(days=30):
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à—É—é —Å–µ—Å—Å–∏—é
        del sessions[session_token]
        save_user_sessions(sessions)
        return None
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    sessions[session_token]['last_activity'] = datetime.now().isoformat()
    save_user_sessions(sessions)
    
    return {
        'phone': session_data['phone'],
        'session_token': session_token
    }

def logout_user(session_token):
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    if not session_token:
        return False
        
    sessions = load_user_sessions()
    if session_token in sessions:
        del sessions[session_token]
        save_user_sessions(sessions)
        return True
    
    return False

def cleanup_expired_codes():
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ SMS –∫–æ–¥—ã"""
    codes = load_sms_codes()
    current_time = datetime.now()
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–¥—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
    hour_ago = current_time - timedelta(hours=1)
    codes_to_remove = []
    
    for code_id, code_data in codes.items():
        created_at = datetime.fromisoformat(code_data.get('created_at', '2020-01-01'))
        if created_at < hour_ago:
            codes_to_remove.append(code_id)
    
    for code_id in codes_to_remove:
        del codes[code_id]
    
    if codes_to_remove:
        save_sms_codes(codes)
        print(f"üßπ –û—á–∏—â–µ–Ω–æ {len(codes_to_remove)} –∏—Å—Ç–µ–∫—à–∏—Ö SMS –∫–æ–¥–æ–≤")
