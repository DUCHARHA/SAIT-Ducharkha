
// Service Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const CACHE_NAME = 'ducharha-v1';
const urlsToCache = [
  '/',
  '/static/style.css',
  '/static/script.js',
  '/static/notifications.js'
];

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', event => {
  console.log('Service Worker: –£—Å—Ç–∞–Ω–æ–≤–∫–∞...');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('Service Worker: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤');
        return cache.addAll(urlsToCache);
      })
      .catch(error => {
        console.error('Service Worker: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      })
  );
  self.skipWaiting();
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', event => {
  console.log('Service Worker: –ê–∫—Ç–∏–≤–∞—Ü–∏—è...');
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName !== CACHE_NAME) {
            console.log('Service Worker: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  self.clients.claim();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (–±–∞–∑–æ–≤–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
self.addEventListener('fetch', event => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ API –∏ POST –∑–∞–ø—Ä–æ—Å—ã
  if (event.request.method !== 'GET' || 
      event.request.url.includes('/api/') ||
      event.request.url.includes('/search') ||
      event.request.url.includes('/update_cart')) {
    return;
  }

  event.respondWith(
    caches.match(event.request)
      .then(response => {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫—ç—à–∞ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–µ—Ç–∏
        return response || fetch(event.request);
      })
      .catch(error => {
        console.error('Service Worker: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
        return fetch(event.request);
      })
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
self.addEventListener('push', event => {
  console.log('Service Worker: Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ');
  
  if (!event.data) {
    console.log('Service Worker: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏');
    return;
  }

  try {
    const data = event.data.json();
    console.log('Service Worker: –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', data);
    
    const options = {
      body: data.body || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –î—É—á–∞—Ä—Ö–∞',
      icon: data.icon || '/static/icon-192x192.png',
      badge: '/static/icon-192x192.png',
      image: data.image,
      data: {
        order_number: data.order_number,
        phone: data.phone,
        url: data.url || '/'
      },
      actions: data.actions || [],
      requireInteraction: data.requireInteraction || false,
      silent: false,
      vibrate: [200, 100, 200],
      tag: data.tag || 'ducharha-notification'
    };
    
    const title = data.title || 'üõí –î—É—á–∞—Ä—Ö–∞';
    
    event.waitUntil(
      self.registration.showNotification(title, options)
    );
  } catch (error) {
    console.error('Service Worker: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ push:', error);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    event.waitUntil(
      self.registration.showNotification('üõí –î—É—á–∞—Ä—Ö–∞', {
        body: '–£ –≤–∞—Å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        icon: '/static/icon-192x192.png'
      })
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', event => {
  console.log('Service Worker: –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é');
  
  event.notification.close();
  
  const data = event.notification.data || {};
  let url = data.url || '/';
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
  if (event.action) {
    console.log('Service Worker: –î–µ–π—Å—Ç–≤–∏–µ:', event.action);
    
    switch (event.action) {
      case 'view_order':
        url = `/my_orders?phone=${data.phone || ''}`;
        break;
      case 'track_courier':
        url = `/track_order/${data.order_number || ''}`;
        break;
      case 'repeat_order':
        url = `/repeat_order/${data.order_number || ''}`;
        break;
      case 'cancel_order':
        url = `/cancel_order/${data.order_number || ''}`;
        break;
      default:
        url = data.url || '/';
    }
  }
  
  console.log('Service Worker: –û—Ç–∫—Ä—ã–≤–∞–µ–º URL:', url);
  
  event.waitUntil(
    clients.matchAll({ type: 'window', includeUncontrolled: true })
      .then(clientList => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —É–∂–µ —Å–∞–π—Ç
        for (const client of clientList) {
          if (client.url.includes(self.location.origin) && 'focus' in client) {
            console.log('Service Worker: –§–æ–∫—É—Å–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫–Ω–æ');
            client.navigate(url);
            return client.focus();
          }
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        if (clients.openWindow) {
          console.log('Service Worker: –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ');
          return clients.openWindow(url);
        }
      })
      .catch(error => {
        console.error('Service Worker: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞:', error);
      })
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
self.addEventListener('notificationclose', event => {
  console.log('Service Worker: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
self.addEventListener('message', event => {
  console.log('Service Worker: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞:', event.data);
  
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('Service Worker: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    self.skipWaiting();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
self.addEventListener('error', event => {
  console.error('Service Worker: –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
});

self.addEventListener('unhandledrejection', event => {
  console.error('Service Worker: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', event.reason);
});

console.log('Service Worker: –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
